name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:
    runs-on: custom_ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets[matrix.environment + '_AZURE_CREDENTIALS'] }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to ACR
        run: echo "${{ secrets[matrix.environment + '_ACR_PASSWORD'] }}" | docker login ${{ matrix.environment }}surgeacrregistry.azurecr.io -u "${{ secrets[matrix.environment + '_ACR_USERNAME'] }}" --password-stdin

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ matrix.environment }}-surge${{ matrix.environment }}:latest .
          docker tag ${{ matrix.environment }}-surge${{ matrix.environment }}:latest ${{ matrix.environment }}surgeacrregistry.azurecr.io/${{ matrix.environment }}-surgedev:latest
          docker push ${{ matrix.environment }}surgeacrregistry.azurecr.io/${{ matrix.environment }}-surge${{ matrix.environment }}:latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init -backend-config="resource_group_name=${{ secrets[matrix.environment + '_BACKEND_RESOURCE_GROUP_NAME'] }}" -backend-config="storage_account_name=${{ secrets[matrix.environment + '_BACKEND_STORAGE_ACCOUNT_NAME'] }}" -backend-config="container_name=${{ secrets[matrix.environment + '_BACKEND_CONTAINER_NAME'] }}"
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -var-file=environment/${{ matrix.environment }}/terraform.tfvars -out=tfplan
        working-directory: ./terraform
        env:
          TF_VAR_resource_group_name: ${{ secrets[matrix.environment + '_RESOURCE_GROUP_NAME'] }}
          TF_VAR_location: ${{ secrets[matrix.environment + '_LOCATION'] }}
          TF_VAR_environment: ${{ matrix.environment }}
          TF_VAR_monitoring_sku: ${{ secrets[matrix.environment + '_MONITORING_SKU'] }}
          TF_VAR_default_node_pool_vm_size: ${{ secrets[matrix.environment + '_DEFAULT_NODE_POOL_VM_SIZE'] }}
          TF_VAR_backend_resource_group_name: ${{ secrets[matrix.environment + '_BACKEND_RESOURCE_GROUP_NAME'] }}
          TF_VAR_backend_storage_account_name: ${{ secrets[matrix.environment + '_BACKEND_STORAGE_ACCOUNT_NAME'] }}
          TF_VAR_backend_container_name: ${{ secrets[matrix.environment + '_BACKEND_CONTAINER_NAME'] }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file=environment/${{ matrix.environment }}/terraform.tfvars tfplan
        working-directory: ./terraform
        env:
          TF_VAR_resource_group_name: ${{ secrets[matrix.environment + '_RESOURCE_GROUP_NAME'] }}
          TF_VAR_location: ${{ secrets[matrix.environment + '_LOCATION'] }}
          TF_VAR_environment: ${{ matrix.environment }}
          TF_VAR_monitoring_sku: ${{ secrets[matrix.environment + '_MONITORING_SKU'] }}
          TF_VAR_default_node_pool_vm_size: ${{ secrets[matrix.environment + '_DEFAULT_NODE_POOL_VM_SIZE'] }}
          TF_VAR_backend_resource_group_name: ${{ secrets[matrix.environment + '_BACKEND_RESOURCE_GROUP_NAME'] }}
          TF_VAR_backend_storage_account_name: ${{ secrets[matrix.environment + '_BACKEND_STORAGE_ACCOUNT_NAME'] }}
          TF_VAR_backend_container_name: ${{ secrets[matrix.environment + '_BACKEND_CONTAINER_NAME'] }}

      - name: Set up Kubernetes
        uses: azure/setup-kubectl@v1
    
    # - name: Deploy AGIC
    #   run: |
    #     helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/
    #     helm repo update
    #     helm install ingress-azure application-gateway-kubernetes-ingress/ingress-azure \
    #       --namespace kube-system \
    #       --set appgw.name=${{ secrets.ENVIRONMENT }}surge-appgw \
    #       --set appgw.resourceGroup=${{ secrets.RESOURCE_GROUP_NAME }} \
    #       --set appgw.subscriptionId=${{ secrets.AZURE_SUBSCRIPTION_ID }} \
    #       --set appgw.shared=false \
    #       --set armAuth.type=aadPodIdentity \
    #       --set armAuth.identityResourceID=${{ secrets.AZURE_IDENTITY_RESOURCE_ID }} \
    #       --set armAuth.identityClientID=${{ secrets.AZURE_IDENTITY_CLIENT_ID }} \
    #       --set rbac.enabled=true \
    #       --set verbosityLevel=3

      - name: Deploy to AKS
        run: |
          ansible-playbook -i localhost k8s/deploy.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f hpa.yaml
          kubectl apply -f serviceaccount.yaml
          kubectl apply -f role.yaml
          kubectl apply -f rolebinding.yaml
        env:
          config_name: ${{ secrets[matrix.environment + '_CONFIG_NAME'] }}
          namespace: ${{ secrets[matrix.environment + '_NAMESPACE'] }}
          app_setting: ${{ secrets[matrix.environment + '_APP_SETTING'] }}
          config_name: ${{ secrets[matrix.environment + '_CONFIG_NAME'] }}
          target_port: ${{ secrets[matrix.environment + '_TARGET_PORT'] }}
          service_port: ${{ secrets[matrix.environment + '_SERVICE_PORT'] }}
          protocol: ${{ secrets[matrix.environment + '_PROTOCOL'] }}
          container_port: ${{ secrets[matrix.environment + '_CONTAINER_PORT'] }}
          secret1_name: ${{ secrets[matrix.environment + '_SECRET1_NAME'] }}
          secret2_name: ${{ secrets[matrix.environment + '_SECRET2_NAME'] }}
          secret3_name: ${{ secrets[matrix.environment + '_SECRET3_NAME'] }}
          resource_memory: ${{ secrets[matrix.environment + '_RESOURCE_MEMORY'] }}
          resource_cpu: ${{ secrets[matrix.environment + '_RESOURCE_CPU'] }}
          request_memory: ${{ secrets[matrix.environment + '_REQUEST_MEMORY'] }}
          request_cpu: ${{ secrets[matrix.environment + '_REQUEST_CPU'] }}
          minReplicas: ${{ secrets[matrix.environment + '_MIN_REPLICAS'] }}
          maxReplicas: ${{ secrets[matrix.environment + '_MAX_REPLICAS'] }}
          cpu_averageUtilization: ${{ secrets[matrix.environment + '_CPU_AVERAGE_UTILIZATION'] }}
          memory_averageUtilization: ${{ secrets[matrix.environment + '_MEMORY_AVERAGE_UTILIZATION'] }}
          keyvault_name: ${{ secrets[matrix.environment + '_KEYVAULT_NAME'] }}
          tenant_id: ${{ secrets[matrix.environment + '_TENANT_ID'] }}
          http_path: ${{ secrets[matrix.environment + '_HTTP_PATH'] }}  
          environment: ${{ matrix.environment }}        

      - name: Clean up evicted pods
        run: ./scripts/cleanup.sh
